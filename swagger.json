{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kiali project, observability for the Istio service mesh",
    "title": "Kiali",
    "version": "_"
  },
  "basePath": "/api",
  "paths": {
    "/": {
      "get": {
        "description": "Endpoint to get the status of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "Root",
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/apps/{app}/health": {
      "get": {
        "description": "Get health associated to the given app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "App",
            "description": "The target app",
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appHealthResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/apps/{app}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a single app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "true",
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of labels to use for grouping inbound metrics (via Prometheus 'by' clause).",
            "name": "byLabelsIn[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of labels to use for grouping outbound metrics (via Prometheus 'by' clause).",
            "name": "byLabelsOut[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1800",
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "string",
            "default": "15",
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/health": {
      "get": {
        "description": "Get health for all objects in the given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "pattern": "^(app|service|workload)$",
            "type": "string",
            "default": "app",
            "x-go-name": "Type",
            "description": "The type of health, \"app\", \"service\" or \"workload\".",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceAppHealthResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/services/{service}/health": {
      "get": {
        "description": "Get health associated to the given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Service",
            "description": "The target service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceHealthResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/services/{service}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a single service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "true",
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of labels to use for grouping inbound metrics (via Prometheus 'by' clause).",
            "name": "byLabelsIn[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of labels to use for grouping outbound metrics (via Prometheus 'by' clause).",
            "name": "byLabelsOut[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1800",
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "string",
            "default": "15",
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/workloads/{workload}/health": {
      "get": {
        "description": "Get health associated to the given workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Workload",
            "description": "The target workload",
            "name": "workload",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadHealthResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/workloads/{workload}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a single workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "true",
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of labels to use for grouping inbound metrics (via Prometheus 'by' clause).",
            "name": "byLabelsIn[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of labels to use for grouping outbound metrics (via Prometheus 'by' clause).",
            "name": "byLabelsOut[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1800",
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "string",
            "default": "15",
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/grafana": {
      "get": {
        "description": "Get the grafana URL and other descriptors",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "grafanaInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/grafanaInfoResponse"
          },
          "204": {
            "$ref": "#/responses/grafanaInfoResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/notAcceptableError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/jaeger": {
      "get": {
        "description": "Get the jaeger URL and other descriptors",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "jaegerInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/jaegerInfoResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/notAcceptableError"
          }
        }
      }
    },
    "/namespaces": {
      "get": {
        "description": "Endpoint to get the list of the available namespaces",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceList",
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceList"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/applications/{app}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for an app node detail graph.",
        "operationId": "graphApp",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "version",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Ignored unless graph type is versionedApp. Available groupings: [version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including istio-system (infra) services. Ignored if namespace is istio-system.",
            "name": "includeIstio",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/applications/{app}/versions/{version}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for a versioned app node detail graph.",
        "operationId": "graphAppVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app version (label value).",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "version",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Ignored unless graph type is versionedApp. Available groupings: [version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including istio-system (infra) services. Ignored if namespace is istio-system.",
            "name": "includeIstio",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps": {
      "get": {
        "description": "Endpoint to get the list of apps for a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appListResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}": {
      "get": {
        "description": "Endpoint to get the app details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appDetails"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for a namespaces graph.",
        "operationId": "graphNamespace",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "version",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Ignored unless graph type is versionedApp. Available groupings: [version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including istio-system (infra) services. Ignored if namespace is istio-system.",
            "name": "includeIstio",
            "in": "query"
          },
          {
            "type": "string",
            "default": "namespace path param",
            "x-go-name": "Name",
            "description": "Comma-separated list of namespaces to include in the graph. Overrides namespace path param.",
            "name": "namespaces",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/istio": {
      "get": {
        "description": "Endpoint to get the list of Istio Config of a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "istioConfigList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigList"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/istio/{object_type}/{object}": {
      "get": {
        "description": "Endpoint to get the Istio Config of an Istio object",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "istioConfigDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/istio/{object_type}/{object}/istio_validations": {
      "get": {
        "description": "Endpoint to get the list of istio object validations for a service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "objectValidations",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/typeValidationsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/istio_validations": {
      "get": {
        "description": "Endpoint to get the list of istio object validations for a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceValidations",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceValidationsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services": {
      "get": {
        "description": "Endpoint to get the details of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceListResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}": {
      "get": {
        "description": "Endpoint to get the details of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceDetailsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for a service node detail graph.",
        "operationId": "graphService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "version",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Ignored unless graph type is versionedApp. Available groupings: [version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including istio-system (infra) services. Ignored if namespace is istio-system.",
            "name": "includeIstio",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/istio_validations": {
      "get": {
        "description": "Endpoint to get the list of istio object validations for a service",
        "tags": [
          "services"
        ],
        "operationId": "serviceValidations",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/typeValidationsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads": {
      "get": {
        "description": "Endpoint to get the list of workloads for a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadListResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}": {
      "get": {
        "description": "Endpoint to get the workload details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for a workload node detail graph.",
        "operationId": "graphWorkload",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace id.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [deadNode, istio, responseTime, securityPolicy, sidecarsCheck, unusedNode].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "version",
            "x-go-name": "Name",
            "description": "App box grouping characteristic. Ignored unless graph type is versionedApp. Available groupings: [version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including istio-system (infra) services. Ignored if namespace is istio-system.",
            "name": "includeIstio",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Endpoint to get the status of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/token": {
      "get": {
        "security": [
          {
            "authorization": [
              "user",
              "password"
            ]
          }
        ],
        "description": "Endpoint to get the authentication token",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "GetToken",
        "responses": {
          "200": {
            "$ref": "#/responses/tokenGenerated"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "x-go-name": "IP"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Addresses": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Address"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "App": {
      "type": "object",
      "required": [
        "namespace",
        "name",
        "workloads",
        "serviceNames"
      ],
      "properties": {
        "name": {
          "description": "Name of the application",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "serviceNames": {
          "description": "List of service names linked with an application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceNames"
        },
        "workloads": {
          "description": "Workloads for a given application",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadItem"
          },
          "x-go-name": "Workloads"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "AppHealth": {
      "description": "AppHealth contains aggregated health from various sources, for a given app",
      "type": "object",
      "properties": {
        "envoy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvoyHealthWrapper"
          },
          "x-go-name": "Envoy"
        },
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        },
        "workloadStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadStatus"
          },
          "x-go-name": "WorkloadStatuses"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "AppList": {
      "type": "object",
      "required": [
        "namespace",
        "applications"
      ],
      "properties": {
        "applications": {
          "description": "Applications for a given namespace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppListItem"
          },
          "x-go-name": "Apps"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "AppListItem": {
      "description": "AppListItem has the necessary information to display the console app list",
      "type": "object",
      "required": [
        "name",
        "istioSidecar"
      ],
      "properties": {
        "istioSidecar": {
          "description": "Define if all Pods related to the Workloads of this app has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "name": {
          "description": "Name of the application",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Config": {
      "type": "object",
      "properties": {
        "elements": {
          "$ref": "#/definitions/Elements"
        },
        "graphType": {
          "type": "string",
          "x-go-name": "GraphType"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/cytoscape"
    },
    "ContainerInfo": {
      "description": "ContainerInfo holds container name and image",
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "EdgeData": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Cytoscape Fields",
          "type": "string",
          "x-go-name": "Id"
        },
        "isMTLS": {
          "type": "boolean",
          "x-go-name": "IsMTLS"
        },
        "isUnused": {
          "type": "boolean",
          "x-go-name": "IsUnused"
        },
        "percentErr": {
          "type": "string",
          "x-go-name": "PercentErr"
        },
        "percentRate": {
          "type": "string",
          "x-go-name": "PercentRate"
        },
        "rate": {
          "description": "App Fields (not required by Cytoscape)",
          "type": "string",
          "x-go-name": "Rate"
        },
        "rate3XX": {
          "type": "string",
          "x-go-name": "Rate3xx"
        },
        "rate4XX": {
          "type": "string",
          "x-go-name": "Rate4xx"
        },
        "rate5XX": {
          "type": "string",
          "x-go-name": "Rate5xx"
        },
        "responseTime": {
          "type": "string",
          "x-go-name": "ResponseTime"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        },
        "tcpSentRate": {
          "type": "string",
          "x-go-name": "TcpSentRate"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/cytoscape"
    },
    "EdgeWrapper": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeData"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/cytoscape"
    },
    "Elements": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeWrapper"
          },
          "x-go-name": "Edges"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeWrapper"
          },
          "x-go-name": "Nodes"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/cytoscape"
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "addresses": {
          "$ref": "#/definitions/Addresses"
        },
        "ports": {
          "$ref": "#/definitions/Ports"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Endpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Endpoint"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "EnvoyHealthWrapper": {
      "description": "EnvoyHealthWrapper wraps EnvoyServiceHealth with the service name",
      "type": "object",
      "properties": {
        "inbound": {
          "$ref": "#/definitions/EnvoyRatio"
        },
        "outbound": {
          "$ref": "#/definitions/EnvoyRatio"
        },
        "service": {
          "type": "string",
          "x-go-name": "Service"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "EnvoyRatio": {
      "description": "EnvoyRatio is the number of healthy members versus total members",
      "type": "object",
      "properties": {
        "healthy": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Healthy"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/kiali/kiali/prometheus"
    },
    "EnvoyServiceHealth": {
      "description": "EnvoyServiceHealth is the number of healthy versus total membership (ie. replicas) inside envoy cluster for inbound and outbound traffic",
      "type": "object",
      "properties": {
        "inbound": {
          "$ref": "#/definitions/EnvoyRatio"
        },
        "outbound": {
          "$ref": "#/definitions/EnvoyRatio"
        }
      },
      "x-go-package": "github.com/kiali/kiali/prometheus"
    },
    "Gateway": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "selector": {
          "type": "object",
          "x-go-name": "Selector"
        },
        "servers": {
          "type": "object",
          "x-go-name": "Servers"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Gateways": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Gateway"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "GrafanaInfo": {
      "description": "GrafanaInfo provides information to access Grafana dashboards",
      "type": "object",
      "properties": {
        "serviceDashboardPath": {
          "type": "string",
          "x-go-name": "ServiceDashboardPath"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "varNamespace": {
          "type": "string",
          "x-go-name": "VarNamespace"
        },
        "varService": {
          "type": "string",
          "x-go-name": "VarService"
        },
        "varWorkload": {
          "type": "string",
          "x-go-name": "VarWorkload"
        },
        "workloadDashboardPath": {
          "type": "string",
          "x-go-name": "WorkloadDashboardPath"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Histogram": {
      "description": "Histogram contains Metric objects for several histogram-kind statistics",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Metric"
      },
      "x-go-package": "github.com/kiali/kiali/prometheus"
    },
    "IstioCheck": {
      "type": "object",
      "title": "IstioCheck represents an individual check.",
      "required": [
        "message",
        "severity"
      ],
      "properties": {
        "message": {
          "description": "Description of the check",
          "type": "string",
          "x-go-name": "Message",
          "example": "Weight sum should be 100"
        },
        "path": {
          "description": "String that describes where in the yaml file is the check located",
          "type": "string",
          "x-go-name": "Path",
          "example": "spec/http[0]/route"
        },
        "severity": {
          "description": "Indicates the level of importance: error or warning",
          "type": "string",
          "x-go-name": "Severity",
          "example": "error"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioConfigDetails": {
      "type": "object",
      "properties": {
        "destinationRule": {
          "$ref": "#/definitions/destinationRule"
        },
        "gateway": {
          "$ref": "#/definitions/Gateway"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "objectType": {
          "type": "string",
          "x-go-name": "ObjectType"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        },
        "quotaSpec": {
          "$ref": "#/definitions/QuotaSpec"
        },
        "quotaSpecBinding": {
          "$ref": "#/definitions/QuotaSpecBinding"
        },
        "rule": {
          "$ref": "#/definitions/IstioRuleDetails"
        },
        "serviceEntry": {
          "$ref": "#/definitions/ServiceEntry"
        },
        "virtualService": {
          "$ref": "#/definitions/virtualService"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioConfigList": {
      "description": "This type is used for returning a response of IstioConfigList",
      "type": "object",
      "title": "IstioConfigList istioConfigList",
      "required": [
        "namespace"
      ],
      "properties": {
        "destinationRules": {
          "$ref": "#/definitions/destinationRules"
        },
        "gateways": {
          "$ref": "#/definitions/Gateways"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "quotaSpecBindings": {
          "$ref": "#/definitions/QuotaSpecBindings"
        },
        "quotaSpecs": {
          "$ref": "#/definitions/QuotaSpecs"
        },
        "rules": {
          "$ref": "#/definitions/istioRules"
        },
        "serviceEntries": {
          "$ref": "#/definitions/ServiceEntries"
        },
        "virtualServices": {
          "$ref": "#/definitions/virtualServices"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioHandler": {
      "type": "object",
      "properties": {
        "adapter": {
          "type": "string",
          "x-go-name": "Adapter"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "type": "object",
          "x-go-name": "Spec"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioInstance": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "type": "object",
          "x-go-name": "Spec"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioRuleAction": {
      "type": "object",
      "properties": {
        "handler": {
          "$ref": "#/definitions/IstioHandler"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioInstance"
          },
          "x-go-name": "Instances"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioRuleDetails": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioRuleAction"
          },
          "x-go-name": "Actions"
        },
        "match": {
          "type": "object",
          "x-go-name": "Match"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioValidation": {
      "type": "object",
      "title": "IstioValidation represents a list of checks associated to an Istio object.",
      "required": [
        "name",
        "objectType",
        "valid"
      ],
      "properties": {
        "checks": {
          "description": "Array of checks. It might be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioCheck"
          },
          "x-go-name": "Checks"
        },
        "name": {
          "description": "Name of the object itself",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        },
        "objectType": {
          "description": "Type of the object",
          "type": "string",
          "x-go-name": "ObjectType",
          "example": "virtualservice"
        },
        "valid": {
          "description": "Represents validity of the object: in case of warning, validity remains as true",
          "type": "boolean",
          "x-go-name": "Valid",
          "example": false
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "JaegerInfo": {
      "description": "JaegerInfo provides information to access Jaeger UI",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Matrix": {
      "type": "array",
      "title": "Matrix is a list of time series.",
      "items": {
        "$ref": "#/definitions/SampleStream"
      },
      "x-go-package": "github.com/kiali/kiali/vendor/github.com/prometheus/common/model"
    },
    "Metric": {
      "description": "Metric holds the Prometheus Matrix model, which contains one or more time series (depending on grouping)",
      "type": "object",
      "properties": {
        "matrix": {
          "$ref": "#/definitions/Matrix"
        }
      },
      "x-go-package": "github.com/kiali/kiali/prometheus"
    },
    "Metrics": {
      "description": "Metrics contains all simple metrics and histograms data for both source and destination telemetry",
      "type": "object",
      "properties": {
        "dest": {
          "$ref": "#/definitions/ReporterMetrics"
        },
        "source": {
          "$ref": "#/definitions/ReporterMetrics"
        }
      },
      "x-go-package": "github.com/kiali/kiali/prometheus"
    },
    "NameIstioValidation": {
      "description": "List of validations grouped by object name",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/IstioValidation"
      },
      "x-go-package": "github.com/kiali/kiali"
    },
    "NamespaceAppHealth": {
      "description": "NamespaceAppHealth is an alias of map of app name x health",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AppHealth"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "NamespaceValidations": {
      "description": "List of validations grouped by namespace",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/TypedIstioValidations"
      },
      "x-go-package": "github.com/kiali/kiali"
    },
    "NodeData": {
      "type": "object",
      "properties": {
        "app": {
          "type": "string",
          "x-go-name": "App"
        },
        "destServices": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "x-go-name": "DestServices"
        },
        "hasCB": {
          "type": "boolean",
          "x-go-name": "HasCB"
        },
        "hasMissingSC": {
          "type": "boolean",
          "x-go-name": "HasMissingSC"
        },
        "hasVS": {
          "type": "boolean",
          "x-go-name": "HasVS"
        },
        "id": {
          "description": "Cytoscape Fields",
          "type": "string",
          "x-go-name": "Id"
        },
        "isDead": {
          "type": "boolean",
          "x-go-name": "IsDead"
        },
        "isEgress": {
          "type": "boolean",
          "x-go-name": "IsEgress"
        },
        "isGroup": {
          "type": "string",
          "x-go-name": "IsGroup"
        },
        "isInaccessible": {
          "type": "boolean",
          "x-go-name": "IsInaccessible"
        },
        "isMisconfigured": {
          "type": "string",
          "x-go-name": "IsMisconfigured"
        },
        "isOutside": {
          "type": "boolean",
          "x-go-name": "IsOutside"
        },
        "isRoot": {
          "type": "boolean",
          "x-go-name": "IsRoot"
        },
        "isUnused": {
          "type": "boolean",
          "x-go-name": "IsUnused"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "nodeType": {
          "description": "App Fields (not required by Cytoscape)",
          "type": "string",
          "x-go-name": "NodeType"
        },
        "parent": {
          "type": "string",
          "x-go-name": "Parent"
        },
        "rate": {
          "type": "string",
          "x-go-name": "Rate"
        },
        "rate3XX": {
          "type": "string",
          "x-go-name": "Rate3xx"
        },
        "rate4XX": {
          "type": "string",
          "x-go-name": "Rate4xx"
        },
        "rate5XX": {
          "type": "string",
          "x-go-name": "Rate5xx"
        },
        "rateOut": {
          "type": "string",
          "x-go-name": "RateOut"
        },
        "rateTcpSent": {
          "type": "string",
          "x-go-name": "RateTcpSent"
        },
        "rateTcpSentOut": {
          "type": "string",
          "x-go-name": "RateTcpSentOut"
        },
        "service": {
          "type": "string",
          "x-go-name": "Service"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "workload": {
          "type": "string",
          "x-go-name": "Workload"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/cytoscape"
    },
    "NodeWrapper": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/NodeData"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/cytoscape"
    },
    "Pod": {
      "description": "Pod holds a subset of v1.Pod data that is meaningful in Kiali",
      "type": "object",
      "properties": {
        "appLabel": {
          "type": "boolean",
          "x-go-name": "AppLabel"
        },
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "createdBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "x-go-name": "CreatedBy"
        },
        "istioContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "IstioContainers"
        },
        "istioInitContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "IstioInitContainers"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "versionLabel": {
          "type": "boolean",
          "x-go-name": "VersionLabel"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Pods": {
      "description": "Pods alias for list of Pod structs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Pod"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Port": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Port"
        },
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Ports": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Port"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "QuotaSpec": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "rules": {
          "type": "object",
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "QuotaSpecBinding": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "quotaSpecs": {
          "type": "object",
          "x-go-name": "QuotaSpecs"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "services": {
          "type": "object",
          "x-go-name": "Services"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "QuotaSpecBindings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QuotaSpecBinding"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "QuotaSpecs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QuotaSpec"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Reference": {
      "description": "Reference holds some information on the pod creator",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ReporterMetrics": {
      "description": "ReporterMetrics contains all simple metrics and histograms data for one reporter's telemetry",
      "type": "object",
      "properties": {
        "histograms": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Histogram"
          },
          "x-go-name": "Histograms"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Metric"
          },
          "x-go-name": "Metrics"
        }
      },
      "x-go-package": "github.com/kiali/kiali/prometheus"
    },
    "RequestHealth": {
      "description": "RequestHealth holds several stats about recent request errors",
      "type": "object",
      "properties": {
        "errorRatio": {
          "type": "number",
          "format": "double",
          "x-go-name": "ErrorRatio"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ResourcePermissions": {
      "description": "ResourcePermissions holds permission flags for an object type\nTrue means allowed.",
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "x-go-name": "Create"
        },
        "delete": {
          "type": "boolean",
          "x-go-name": "Delete"
        },
        "update": {
          "type": "boolean",
          "x-go-name": "Update"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "SamplePair": {
      "type": "object",
      "title": "SamplePair pairs a SampleValue with a Timestamp.",
      "properties": {
        "Timestamp": {
          "$ref": "#/definitions/Time"
        },
        "Value": {
          "$ref": "#/definitions/SampleValue"
        }
      },
      "x-go-package": "github.com/kiali/kiali/vendor/github.com/prometheus/common/model"
    },
    "SampleStream": {
      "type": "object",
      "title": "SampleStream is a stream of Values belonging to an attached COWMetric.",
      "properties": {
        "metric": {
          "$ref": "#/definitions/Metric"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SamplePair"
          },
          "x-go-name": "Values"
        }
      },
      "x-go-package": "github.com/kiali/kiali/vendor/github.com/prometheus/common/model"
    },
    "SampleValue": {
      "description": "A SampleValue is a representation of a value for a given sample at a given\ntime.",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/kiali/kiali/vendor/github.com/prometheus/common/model"
    },
    "Service": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "ip": {
          "type": "string",
          "x-go-name": "Ip"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "ports": {
          "$ref": "#/definitions/Ports"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceDetails": {
      "type": "object",
      "properties": {
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SourceWorkload"
            }
          },
          "x-go-name": "Dependencies"
        },
        "destinationRules": {
          "$ref": "#/definitions/destinationRules"
        },
        "endpoints": {
          "$ref": "#/definitions/Endpoints"
        },
        "health": {
          "$ref": "#/definitions/ServiceHealth"
        },
        "istioSidecar": {
          "type": "boolean",
          "x-go-name": "IstioSidecar"
        },
        "service": {
          "$ref": "#/definitions/Service"
        },
        "virtualServices": {
          "$ref": "#/definitions/virtualServices"
        },
        "workloads": {
          "$ref": "#/definitions/WorkloadOverviews"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceEntry"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceEntry": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "object",
          "x-go-name": "Addresses"
        },
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "endpoints": {
          "type": "object",
          "x-go-name": "Endpoints"
        },
        "hosts": {
          "type": "object",
          "x-go-name": "Hosts"
        },
        "location": {
          "type": "object",
          "x-go-name": "Location"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ports": {
          "type": "object",
          "x-go-name": "Ports"
        },
        "resolution": {
          "type": "object",
          "x-go-name": "Resolution"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceHealth": {
      "description": "ServiceHealth contains aggregated health from various sources, for a given service",
      "type": "object",
      "properties": {
        "envoy": {
          "$ref": "#/definitions/EnvoyServiceHealth"
        },
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceList": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceOverview"
          },
          "x-go-name": "Services"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceOverview": {
      "type": "object",
      "required": [
        "name",
        "istioSidecar",
        "appLabel"
      ],
      "properties": {
        "appLabel": {
          "description": "Has label app",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Service has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "name": {
          "description": "Name of the Service",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "SourceWorkload": {
      "description": "SourceWorkload holds workload identifiers used for service dependencies",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "StatusInfo": {
      "description": "This is used for returning a response of Kiali Status",
      "type": "object",
      "title": "StatusInfo statusInfo",
      "required": [
        "status",
        "externalServices"
      ],
      "properties": {
        "externalServices": {
          "description": "An array of external services installed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/externalServiceInfo"
          },
          "x-go-name": "ExternalServices"
        },
        "status": {
          "description": "The state of Kiali\nA hash of key,values with versions of Kiali and state",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Status"
        },
        "warningMessages": {
          "description": "An array of warningMessages",
          "type": "array",
          "items": {
            "type": "string",
            "example": "Istio version 0.7.1 is not supported, the version should be 0.8.0"
          },
          "x-go-name": "WarningMessages"
        }
      },
      "x-go-package": "github.com/kiali/kiali/status"
    },
    "Time": {
      "description": "Time is the number of milliseconds since the epoch\n(1970-01-01 00:00 UTC) excluding leap seconds.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/kiali/kiali/vendor/github.com/prometheus/common/model"
    },
    "TokenGenerated": {
      "description": "This is used for returning the token",
      "type": "object",
      "title": "TokenGenerated tokenGenerated",
      "required": [
        "token",
        "expired_at"
      ],
      "properties": {
        "expired_at": {
          "description": "The expired time for the token\nA string with the Datetime when the token will be expired",
          "type": "string",
          "x-go-name": "ExpiredAt",
          "example": "2018-06-20 19:40:54.116369887 +0000 UTC m=+43224.838320603"
        },
        "token": {
          "description": "The authentication token\nA string with the authentication token for the user",
          "type": "string",
          "x-go-name": "Token",
          "example": "zI1NiIsIsR5cCI6IkpXVCJ9.ezJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNTI5NTIzNjU0fQ.PPZvRGnR6VA4v7FmgSfQcGQr-VD"
        }
      },
      "x-go-package": "github.com/kiali/kiali/config"
    },
    "TypedIstioValidations": {
      "description": "List of validations grouped by object type",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NameIstioValidation"
      },
      "x-go-package": "github.com/kiali/kiali"
    },
    "Workload": {
      "description": "Workload has the details of a workload",
      "type": "object",
      "required": [
        "name",
        "type",
        "createdAt",
        "resourceVersion",
        "istioSidecar",
        "appLabel",
        "versionLabel",
        "podCount",
        "replicas",
        "availableReplicas",
        "unavailableReplicas"
      ],
      "properties": {
        "appLabel": {
          "description": "Define if Pods related to this Workload has the label App",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "availableReplicas": {
          "description": "Number of available replicas",
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas",
          "example": 1
        },
        "createdAt": {
          "description": "Creation timestamp (in RFC3339 format)",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2018-07-31T12:24:17Z"
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Workload labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        },
        "podCount": {
          "description": "Number of current workload pods",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PodCount",
          "example": 1
        },
        "pods": {
          "$ref": "#/definitions/Pods"
        },
        "replicas": {
          "description": "Number of desired replicas",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Replicas",
          "example": 2
        },
        "resourceVersion": {
          "description": "Kubernetes ResourceVersion",
          "type": "string",
          "x-go-name": "ResourceVersion",
          "example": "192892127"
        },
        "services": {
          "$ref": "#/definitions/Services"
        },
        "type": {
          "description": "Type of the workload",
          "type": "string",
          "x-go-name": "Type",
          "example": "deployment"
        },
        "unavailableReplicas": {
          "description": "Number of unavailable replicas",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UnavailableReplicas",
          "example": 1
        },
        "versionLabel": {
          "description": "Define if Pods related to this Workload has the label Version",
          "type": "boolean",
          "x-go-name": "VersionLabel",
          "example": true
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadHealth": {
      "description": "WorkloadHealth contains aggregated health from various sources, for a given workload",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        },
        "workloadStatus": {
          "$ref": "#/definitions/WorkloadStatus"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadItem": {
      "type": "object",
      "required": [
        "workloadName",
        "istioSidecar"
      ],
      "properties": {
        "istioSidecar": {
          "description": "Define if all Pods related to the Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "workloadName": {
          "description": "Name of a workload member of an application",
          "type": "string",
          "x-go-name": "WorkloadName",
          "example": "reviews-v1"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadList": {
      "type": "object",
      "required": [
        "namespace",
        "workloads"
      ],
      "properties": {
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "workloads": {
          "description": "Workloads for a given namespace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadListItem"
          },
          "x-go-name": "Workloads"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadListItem": {
      "description": "WorkloadListItem has the necessary information to display the console workload list",
      "type": "object",
      "required": [
        "name",
        "type",
        "createdAt",
        "resourceVersion",
        "istioSidecar",
        "appLabel",
        "versionLabel",
        "podCount"
      ],
      "properties": {
        "appLabel": {
          "description": "Define if Pods related to this Workload has the label App",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "createdAt": {
          "description": "Creation timestamp (in RFC3339 format)",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2018-07-31T12:24:17Z"
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Workload labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        },
        "podCount": {
          "description": "Number of current workload pods",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PodCount",
          "example": 1
        },
        "resourceVersion": {
          "description": "Kubernetes ResourceVersion",
          "type": "string",
          "x-go-name": "ResourceVersion",
          "example": "192892127"
        },
        "type": {
          "description": "Type of the workload",
          "type": "string",
          "x-go-name": "Type",
          "example": "deployment"
        },
        "versionLabel": {
          "description": "Define if Pods related to this Workload has the label Version",
          "type": "boolean",
          "x-go-name": "VersionLabel",
          "example": true
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadOverviews": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WorkloadListItem"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadStatus": {
      "description": "WorkloadStatus gives the available / total replicas in a deployment of a pod",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Replicas"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "destinationRule": {
      "description": "This is used for returning a DestinationRule",
      "type": "object",
      "title": "DestinationRule destinationRule",
      "required": [
        "name",
        "createdAt",
        "resourceVersion"
      ],
      "properties": {
        "createdAt": {
          "description": "The creation date of the destinationRule",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "host": {
          "type": "object",
          "x-go-name": "Host"
        },
        "name": {
          "description": "The name of the destinationRule",
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceVersion": {
          "description": "The resource version of the destinationRule",
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "subsets": {
          "type": "object",
          "x-go-name": "Subsets"
        },
        "trafficPolicy": {
          "type": "object",
          "x-go-name": "TrafficPolicy"
        }
      },
      "x-go-name": "DestinationRule",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "destinationRules": {
      "description": "This is used for returning an array of DestinationRules",
      "type": "array",
      "title": "DestinationRules destinationRules",
      "items": {
        "$ref": "#/definitions/destinationRule"
      },
      "x-go-name": "DestinationRules",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "externalServiceInfo": {
      "description": "This is used for returning a response of Kiali Status",
      "type": "object",
      "title": "Status response model",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the service",
          "type": "string",
          "x-go-name": "Name",
          "example": "Istio"
        },
        "url": {
          "description": "The service url",
          "type": "string",
          "x-go-name": "Url",
          "example": "jaeger-query-istio-system.127.0.0.1.nip.io"
        },
        "version": {
          "description": "The installed version of the service",
          "type": "string",
          "x-go-name": "Version",
          "example": "0.8.0"
        }
      },
      "x-go-name": "ExternalServiceInfo",
      "x-go-package": "github.com/kiali/kiali/status"
    },
    "istioRule": {
      "description": "This type type is used for returning a IstioRule",
      "type": "object",
      "title": "IstioRule istioRule",
      "required": [
        "name"
      ],
      "properties": {
        "actions": {
          "type": "object",
          "x-go-name": "Actions"
        },
        "match": {
          "type": "object",
          "x-go-name": "Match"
        },
        "name": {
          "description": "The name of the istioRule",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "IstioRule",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "istioRules": {
      "description": "This type type is used for returning an array of IstioRules",
      "type": "array",
      "title": "IstioRules istioRules",
      "items": {
        "$ref": "#/definitions/istioRule"
      },
      "x-go-name": "IstioRules",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "namespace": {
      "description": "A Namespace provide a scope for names\nThis type is used to describe a set of objects.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The id of the namespace.",
          "type": "string",
          "x-go-name": "Name",
          "example": "istio-system"
        }
      },
      "x-go-name": "Namespace",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "virtualService": {
      "description": "This type is used for returning a VirtualService",
      "type": "object",
      "title": "VirtualService virtualService",
      "required": [
        "name",
        "createdAt",
        "resourceVersion"
      ],
      "properties": {
        "createdAt": {
          "description": "The creation date of the virtualService",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "gateways": {
          "type": "object",
          "x-go-name": "Gateways"
        },
        "hosts": {
          "type": "object",
          "x-go-name": "Hosts"
        },
        "http": {
          "type": "object",
          "x-go-name": "Http"
        },
        "name": {
          "description": "The name of the virtualService",
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceVersion": {
          "description": "The resource version of the virtualService",
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "tcp": {
          "type": "object",
          "x-go-name": "Tcp"
        },
        "tls": {
          "type": "object",
          "x-go-name": "Tls"
        }
      },
      "x-go-name": "VirtualService",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "virtualServices": {
      "description": "This type is used for returning an array of VirtualServices",
      "type": "array",
      "title": "VirtualServices virtualServices",
      "items": {
        "$ref": "#/definitions/virtualService"
      },
      "x-go-name": "VirtualServices",
      "x-go-package": "github.com/kiali/kiali/models"
    }
  },
  "responses": {
    "appDetails": {
      "description": "Detailed information of an specific app",
      "schema": {
        "$ref": "#/definitions/App"
      }
    },
    "appHealthResponse": {
      "description": "appHealthResponse contains aggregated health from various sources, for a given app",
      "schema": {
        "$ref": "#/definitions/AppHealth"
      }
    },
    "appListResponse": {
      "description": "Listing all apps in the namespace",
      "schema": {
        "$ref": "#/definitions/AppList"
      }
    },
    "badRequestError": {
      "description": "BadRequestError: the client request is incorrect",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 400,
            "x-go-name": "Code",
            "example": 400
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "grafanaInfoResponse": {
      "description": "Return all the descriptor data related to Grafana",
      "schema": {
        "$ref": "#/definitions/GrafanaInfo"
      }
    },
    "graphResponse": {
      "description": "HTTP status code 200 and cytoscapejs Config in data",
      "schema": {
        "$ref": "#/definitions/Config"
      }
    },
    "internalError": {
      "description": "A Internal is the error message that means something has gone wrong",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 500,
            "x-go-name": "Code",
            "example": 500
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "istioConfigDetailsResponse": {
      "description": "IstioConfig details of an specific Istio Object",
      "schema": {
        "$ref": "#/definitions/IstioConfigDetails"
      }
    },
    "istioConfigList": {
      "description": "HTTP status code 200 and IstioConfigList model in data",
      "schema": {
        "$ref": "#/definitions/IstioConfigList"
      }
    },
    "jaegerInfoResponse": {
      "description": "Return all the descriptor data related to Grafana",
      "schema": {
        "$ref": "#/definitions/JaegerInfo"
      }
    },
    "metricsResponse": {
      "description": "Listing all the information related to a service",
      "schema": {
        "$ref": "#/definitions/Metrics"
      }
    },
    "namespaceAppHealthResponse": {
      "description": "namespaceAppHealthResponse is a map of app name x health",
      "schema": {
        "$ref": "#/definitions/NamespaceAppHealth"
      }
    },
    "namespaceList": {
      "description": "List of Namespaces",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/namespace"
        }
      }
    },
    "namespaceValidationsResponse": {
      "description": "Listing all istio validations for object in the namespace",
      "schema": {
        "$ref": "#/definitions/NamespaceValidations"
      }
    },
    "notAcceptableError": {
      "description": "A NotAcceptable is the error message that means request can't be accepted",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 404,
            "x-go-name": "Code",
            "example": 404
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "notFoundError": {
      "description": "A NotFoundError is the error message that is generated when server could not find what was requested.",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 404,
            "x-go-name": "Code",
            "example": 404
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "serviceDetailsResponse": {
      "description": "Listing all the information related to a workload",
      "schema": {
        "$ref": "#/definitions/ServiceDetails"
      }
    },
    "serviceHealthResponse": {
      "description": "serviceHealthResponse contains aggregated health from various sources, for a given service",
      "schema": {
        "$ref": "#/definitions/ServiceHealth"
      }
    },
    "serviceListResponse": {
      "description": "Listing all services in the namespace",
      "schema": {
        "$ref": "#/definitions/ServiceList"
      }
    },
    "serviceUnavailableError": {
      "description": "A Internal is the error message that means something has gone wrong",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 503,
            "x-go-name": "Code",
            "example": 503
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "statusInfo": {
      "description": "HTTP status code 200 and statusInfo model in data",
      "schema": {
        "$ref": "#/definitions/StatusInfo"
      }
    },
    "tokenGenerated": {
      "description": "HTTP status code 200 and tokenGenerated model in data",
      "schema": {
        "$ref": "#/definitions/TokenGenerated"
      }
    },
    "typeValidationsResponse": {
      "description": "Listing all istio validations for object in the namespace",
      "schema": {
        "$ref": "#/definitions/TypedIstioValidations"
      }
    },
    "workloadDetails": {
      "description": "Listing all the information related to a workload",
      "schema": {
        "$ref": "#/definitions/Workload"
      }
    },
    "workloadHealthResponse": {
      "description": "workloadHealthResponse contains aggregated health from various sources, for a given workload",
      "schema": {
        "$ref": "#/definitions/WorkloadHealth"
      }
    },
    "workloadListResponse": {
      "description": "Listing all workloads in the namespace",
      "schema": {
        "$ref": "#/definitions/WorkloadList"
      }
    }
  }
}